'use client'

import { useState, useEffect } from 'react'
import { VideoCategory, SubscriptionTier, Video, hasAccessToVideo } from '../../lib/vimeo-browser'
import { getVideosFromCatalog, getAllVideosFromCatalog } from '../../lib/video-catalog'

// Import our modular components
import VideoPlayer from '../../components/VideoPlayer'
import VideoSection from '../../components/VideoSection'
import VideoSearchFilter from '../../components/VideoSearchFilter'
import FilteredVideoResults from '../../components/FilteredVideoResults'
import PremiumModal from '../../components/PremiumModal'
import SubscriptionCTA from '../../components/SubscriptionCTA'

// Section definitions
const videoSections = [
  {
    id: VideoCategory.MEDITATION,
    title: 'Meditation',
    description: 'Take a breathâ€”you\'ve got this. Mindfulness offers simple, science-backed tools to help you feel calmer, more focused, and grounded.',
  },
  {
    id: VideoCategory.YOGA_FOR_PE,
    title: 'Yoga for PE',
    description: 'Bring the benefits of yoga to your PE curriculum with these classroom-ready sequences and activities.',
  },
  {
    id: VideoCategory.RELAXATION,
    title: 'Relaxation',
    description: 'Help students unwind, restore, and find balance with these calming sequences and techniques.',
  },
  {
    id: VideoCategory.MINDFUL_MOVEMENTS,
    title: 'Mindful Movements',
    description: 'Positive, inspirational songs set to yoga and functional strength movements for cardio workouts and SEL discussions.',
  }
];

export default function VideosPage() {
  // Search and filter state
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [searchQuery, setSearchQuery] = useState('')
  
  // Modal state
  const [showPremiumModal, setShowPremiumModal] = useState(false)
  const [selectedTier, setSelectedTier] = useState<SubscriptionTier | null>(null)
  
  // Video player state
  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null)
  const [showVideoPlayer, setShowVideoPlayer] = useState(false)
  
  // State for videos in each category with pagination
  const [meditationVideos, setMeditationVideos] = useState<Video[]>([])
  const [yogaForPeVideos, setYogaForPeVideos] = useState<Video[]>([])
  const [relaxationVideos, setRelaxationVideos] = useState<Video[]>([])
  
  // State for displayed videos in each category (3 at a time)
  const [displayedMeditationVideos, setDisplayedMeditationVideos] = useState<Video[]>([])
  const [displayedYogaForPeVideos, setDisplayedYogaForPeVideos] = useState<Video[]>([])
  const [displayedRelaxationVideos, setDisplayedRelaxationVideos] = useState<Video[]>([])
  
  // State for current display index in each category
  const [meditationStartIndex, setMeditationStartIndex] = useState(0)
  const [yogaForPeStartIndex, setYogaForPeStartIndex] = useState(0)
  const [relaxationStartIndex, setRelaxationStartIndex] = useState(0)
  
  // State for loading status in each category
  const [isLoadingMeditation, setIsLoadingMeditation] = useState(false)
  const [isLoadingYoga, setIsLoadingYoga] = useState(false)
  const [isLoadingRelaxation, setIsLoadingRelaxation] = useState(false)
  
  // State for pagination in each category
  const [meditationPage, setMeditationPage] = useState(1)
  const [yogaForPePage, setYogaForPePage] = useState(1)
  const [relaxationPage, setRelaxationPage] = useState(1)
  
  // For demo purposes, we'll use Bronze tier (free) as the default user tier
  // In a real app, this would come from authentication
  const [userSubscriptionTier, setUserSubscriptionTier] = useState<SubscriptionTier>(SubscriptionTier.BRONZE)
  
  // Load initial videos for each category
  useEffect(() => {
    const fetchInitialVideos = async () => {
      setIsLoadingMeditation(true);
      setIsLoadingYoga(true);
      setIsLoadingRelaxation(true);
      
      try {
        // Fetch videos from our catalog data
        const meditationData = await getVideosFromCatalog(VideoCategory.MEDITATION, 1, 9);
        const yogaForPeData = await getVideosFromCatalog(VideoCategory.YOGA_FOR_PE, 1, 9);
        const relaxationData = await getVideosFromCatalog(VideoCategory.RELAXATION, 1, 9);
        
        setMeditationVideos(meditationData);
        setYogaForPeVideos(yogaForPeData);
        setRelaxationVideos(relaxationData);
        
        // Set initial displayed videos (first 3 of each category)
        setDisplayedMeditationVideos(meditationData.slice(0, 3));
        setDisplayedYogaForPeVideos(yogaForPeData.slice(0, 3));
        setDisplayedRelaxationVideos(relaxationData.slice(0, 3));
      } catch (error) {
        console.error('Error fetching videos:', error);
      } finally {
        setIsLoadingMeditation(false);
        setIsLoadingYoga(false);
        setIsLoadingRelaxation(false);
      }
    };
    
    fetchInitialVideos();
  }, []);
  
  // Function to load more videos for a specific category
  const loadMoreVideos = async (category: VideoCategory) => {
    switch (category) {
      case VideoCategory.MEDITATION:
        setIsLoadingMeditation(true);
        try {
          // If we've shown all videos, fetch more
          if (meditationStartIndex + 3 >= meditationVideos.length) {
            const newMeditationVideos = await getVideosFromCatalog(VideoCategory.MEDITATION, meditationPage + 1, 6);
            if (newMeditationVideos.length > 0) {
              setMeditationVideos(prev => [...prev, ...newMeditationVideos]);
              setMeditationPage(meditationPage + 1);
            }
          }
          
          // Calculate next start index with wraparound
          const nextMeditationIndex = (meditationStartIndex + 3) % meditationVideos.length;
          setMeditationStartIndex(nextMeditationIndex);
          
          const endIndex = Math.min(nextMeditationIndex + 3, meditationVideos.length);
          let nextVideos = meditationVideos.slice(nextMeditationIndex, endIndex);
          
          // If not enough videos, wrap around
          if (nextVideos.length < 3 && meditationVideos.length > 3) {
            const remaining = 3 - nextVideos.length;
            nextVideos = [...nextVideos, ...meditationVideos.slice(0, remaining)];
          }
          
          setDisplayedMeditationVideos(nextVideos);
        } catch (error) {
          console.error('Error loading more meditation videos:', error);
        } finally {
          setIsLoadingMeditation(false);
        }
        break;
        
      case VideoCategory.YOGA_FOR_PE:
        setIsLoadingYoga(true);
        try {
          // If we've shown all videos, fetch more
          if (yogaForPeStartIndex + 3 >= yogaForPeVideos.length) {
            const newVideos = await getVideosFromCatalog(VideoCategory.YOGA_FOR_PE, yogaForPePage + 1, 6);
            if (newVideos.length > 0) {
              setYogaForPeVideos(prev => [...prev, ...newVideos]);
              setYogaForPePage(yogaForPePage + 1);
            }
          }
          
          // Calculate next start index with wraparound
          const nextYogaIndex = (yogaForPeStartIndex + 3) % yogaForPeVideos.length;
          setYogaForPeStartIndex(nextYogaIndex);
          
          const endIndex = Math.min(nextYogaIndex + 3, yogaForPeVideos.length);
          let nextVideos = yogaForPeVideos.slice(nextYogaIndex, endIndex);
          
          // If not enough videos, wrap around
          if (nextVideos.length < 3 && yogaForPeVideos.length > 3) {
            const remaining = 3 - nextVideos.length;
            nextVideos = [...nextVideos, ...yogaForPeVideos.slice(0, remaining)];
          }
          
          setDisplayedYogaForPeVideos(nextVideos);
        } catch (error) {
          console.error('Error loading more yoga videos:', error);
        } finally {
          setIsLoadingYoga(false);
        }
        break;
        
      case VideoCategory.RELAXATION:
        setIsLoadingRelaxation(true);
        try {
          // If we've shown all videos, fetch more
          if (relaxationStartIndex + 3 >= relaxationVideos.length) {
            const newVideos = await getVideosFromCatalog(VideoCategory.RELAXATION, relaxationPage + 1, 6);
            if (newVideos.length > 0) {
              setRelaxationVideos(prev => [...prev, ...newVideos]);
              setRelaxationPage(relaxationPage + 1);
            }
          }
          
          // Calculate next start index with wraparound
          const nextRelaxIndex = (relaxationStartIndex + 3) % relaxationVideos.length;
          setRelaxationStartIndex(nextRelaxIndex);
          
          const endIndex = Math.min(nextRelaxIndex + 3, relaxationVideos.length);
          let nextVideos = relaxationVideos.slice(nextRelaxIndex, endIndex);
          
          // If not enough videos, wrap around
          if (nextVideos.length < 3 && relaxationVideos.length > 3) {
            const remaining = 3 - nextVideos.length;
            nextVideos = [...nextVideos, ...relaxationVideos.slice(0, remaining)];
          }
          
          setDisplayedRelaxationVideos(nextVideos);
        } catch (error) {
          console.error('Error loading more relaxation videos:', error);
        } finally {
          setIsLoadingRelaxation(false);
        }
        break;
    }
  };
  
  // Handle video click - check access and show premium modal if needed
  const handleVideoClick = (video: Video) => {
    if (hasAccessToVideo(video, userSubscriptionTier)) {
      // User has access - play video
      setSelectedVideo(video);
      setShowVideoPlayer(true);
    } else {
      // User doesn't have access - show premium modal
      setSelectedTier(video.tier);
      setShowPremiumModal(true);
    }
  };
  
  // Handle filtered video load more
  const handleFilteredLoadMore = () => {
    if (selectedCategory === VideoCategory.MEDITATION) {
      loadMoreVideos(VideoCategory.MEDITATION);
    } else if (selectedCategory === VideoCategory.YOGA_FOR_PE) {
      loadMoreVideos(VideoCategory.YOGA_FOR_PE);
    } else if (selectedCategory === VideoCategory.RELAXATION) {
      loadMoreVideos(VideoCategory.RELAXATION);
    }
  };
  
  // Get filtered videos based on search and category
  const getFilteredVideos = () => {
    // Get all videos from catalog for filtering
    const allVideos = getAllVideosFromCatalog();
    
    return allVideos.filter(video => {
      // Filter by search query
      const matchesSearch = searchQuery === '' || 
        video.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
        video.description.toLowerCase().includes(searchQuery.toLowerCase());
      
      // Filter by category
      const matchesCategory = selectedCategory === 'all' || 
        video.category === selectedCategory ||
        (selectedCategory === VideoCategory.MINDFUL_MOVEMENTS && video.category === VideoCategory.YOGA_FOR_PE && video.title.includes('Mindful')) ||
        (selectedCategory === 'beginner' && video.level === 'beginner') ||
        (selectedCategory === 'intermediate' && video.level === 'intermediate') ||
        (selectedCategory === 'advanced' && video.level === 'advanced');
      
      return matchesSearch && matchesCategory;
    });
  };
  
  // Get filtered results title
  const getFilteredResultsTitle = () => {
    if (selectedCategory !== 'all') {
      const categoryName = videoSections.find(section => section.id === selectedCategory)?.title || 
                          (selectedCategory === 'beginner' ? 'Beginner' : 
                           selectedCategory === 'intermediate' ? 'Intermediate' : 
                           selectedCategory === 'advanced' ? 'Advanced' : 'Videos');
      return categoryName;
    }
    return 'Search Results';
  };
  
  return (
    <>
      <main className="min-h-screen">
        {/* Hero Banner */}
        <section className="bg-gradient-to-r from-primary-800 to-primary-900 text-white py-12">
          <div className="container">
            <h1 className="text-3xl md:text-4xl font-bold mb-4">Yoga Videos for PE Classes</h1>
            <p className="text-xl max-w-2xl text-white font-medium">Discover our collection of instructional videos designed to help you integrate yoga into your physical education curriculum.</p>
          </div>
        </section>
        
        {/* Search and Filter */}
        <VideoSearchFilter 
          searchQuery={searchQuery}
          selectedCategory={selectedCategory}
          onSearchChange={setSearchQuery}
          onCategoryChange={setSelectedCategory}
        />
        
        {/* Video Content */}
        <section className="py-12">
          <div className="container">
            {/* Show filtered videos or category sections */}
            {(selectedCategory !== 'all' || searchQuery !== '') ? (
              <FilteredVideoResults
                title={getFilteredResultsTitle()}
                videos={getFilteredVideos()}
                isLoading={isLoadingMeditation || isLoadingYoga || isLoadingRelaxation}
                userSubscriptionTier={userSubscriptionTier}
                onVideoClick={handleVideoClick}
                onLoadMore={handleFilteredLoadMore}
              />
            ) : (
              // Show all three categories in separate sections
              videoSections.map(section => {
                let sectionVideos: Video[] = [];
                let isLoading = false;
                let loadMoreHandler = () => {};
                
                switch(section.id) {
                  case VideoCategory.MEDITATION:
                    sectionVideos = displayedMeditationVideos;
                    isLoading = isLoadingMeditation;
                    loadMoreHandler = () => loadMoreVideos(VideoCategory.MEDITATION);
                    break;
                  case VideoCategory.YOGA_FOR_PE:
                    sectionVideos = displayedYogaForPeVideos;
                    isLoading = isLoadingYoga;
                    loadMoreHandler = () => loadMoreVideos(VideoCategory.YOGA_FOR_PE);
                    break;
                  case VideoCategory.RELAXATION:
                    sectionVideos = displayedRelaxationVideos;
                    isLoading = isLoadingRelaxation;
                    loadMoreHandler = () => loadMoreVideos(VideoCategory.RELAXATION);
                    break;
                }
                
                return (
                  <VideoSection
                    key={section.id}
                    title={section.title}
                    description={section.description}
                    videos={sectionVideos}
                    isLoading={isLoading}
                    userSubscriptionTier={userSubscriptionTier}
                    onVideoClick={handleVideoClick}
                    onLoadMore={loadMoreHandler}
                  />
                );
              })
            )}
          </div>
        </section>
        
        {/* Subscription CTA */}
        <SubscriptionCTA 
          onSubscribeClick={(tier) => {
            setSelectedTier(tier);
            setShowPremiumModal(true);
          }} 
        />
      </main>
      
      {/* Video Player Modal */}
      {showVideoPlayer && selectedVideo && (
        <VideoPlayer
          videoId={selectedVideo.vimeoId}
          title={selectedVideo.title}
          onClose={() => setShowVideoPlayer(false)}
        />
      )}
      
      {/* Premium Content Modal */}
      {showPremiumModal && (
        <PremiumModal
          selectedTier={selectedTier}
          onClose={() => setShowPremiumModal(false)}
        />
      )}
    </>
  );
}
